.TH yPARSE 3 2015-jun "linux" "heatherly custom tools manual"

.SH NAME
yPARSE \- standard file parsing and aggregating library
.SH SYNOPSIS
.nf
.B #include  <yPARSE.h>
.sp
---(shared)------------------------------------
.BI "char*   yPARSE_version     (void);"
.BI "char    yPARSE_init        (char  " "a_auto " ", void *" "a_verber" ", char  " "a_reusing" ");"
.BI "char    yPARSE_handler     (char  " "a_mode " ", char *" "a_verb  " ", float*" "a_seq" ","
.BI "                            char *" "a_specs" ", void *" "a_reader" ", void *" "a_writer" ","
.BI "                            char *" "a_flags" ", char *" "a_labels" ", char *" "a_desc" ");"
.sp
===(( input ))=================================
---(file)--------------------------------------
.BI "char    yPARSE_open_in     (char *" "a_name" ");"
.BI "char    yPARSE_stdin       (void);"
.BI "char    yPARSE_read_all    (void);"
.BI "char    yPARSE_close_in    (void);"
.BI "char    yPARSE_purge_in    (void);"
.BI "char    yPARSE_read        (int *" "a_tot" ", int *" "a_cnt" ");"
---(parsing)-----------------------------------
.BI "char    yPARSE_toss        (void);"
.BI "char    yPARSE_popstr      (char   *" "a_str" ");"
.BI "char    yPARSE_popchar     (char   *" "a_new" ");"
.BI "char    yPARSE_popint      (int    *" "a_new" ");"
.BI "char    yPARSE_popfloat    (float  *" "a_new" ");"
.BI "char    yPARSE_popdouble   (double *" "a_new" ");"
---(advanced)----------------------------------
.BI "char    yPARSE_popval      (double  " "a_old" ", double *" "a_new" ");"
.BI "char    yPARSE_popfrom     (double  " "a_old" ", double *" "a_new" ");"
.BI "char    yPARSE_adjval      (double  " "a_old" ", char *" "a_entry" ", double *" "a_new" ");"
.BI "char    yPARSE_adjfrom     (double  " "a_old" ", char *" "a_entry" ", double *" "a_new" ");"
---(records)-----------------------------------
.BI "char    yPARSE_stdin       (int *" "a_tot" ", int *" "a_cnt" ");"
.BI "char    yPARSE_load        (int *" "a_tot" ", int *" "a_cnt" ", char *" "a_recd" ");"
.BI "char    yPARSE_hidden      (int *" "a_tot" ", int *" "a_cnt" ", char *" "a_recd" ");"
.BI "char    yPARSE_reload      (int *" "a_tot" ", int *" "a_cnt" ", int " "a_line" ", char *" "a_label" ");"
.sp
---(files)-------------------------------------
.BI "char    yPARSE_open        (char " "a_dir" ", char *" "a_name" ");"
.BI "char    yPARSE_close       (void);"
.sp
===(( output ))================================
---(file)--------------------------------------
.BI "char    yPARSE_stdout      (void);"
.BI "char    yPARSE_open_out    (char *" "a_name" ", char *" "a_prog"  ", char *" "a_desc" ");"
.BI "char    yPARSE_purge_out   (void);"
.BI "char    yPARSE_close_out   (void);"
---(aggregating)-------------------------------
.BI "char    yPARSE_pushverb    (char   *" "a_verb" ");"
.BI "char    yPARSE_pushempty   (void);"
.BI "char    yPARSE_pushstr     (char   *" "a_str" ");"
.BI "char    yPARSE_pushval     (double  " "a_val" ");"
.BI "char    yPARSE_pushchar    (char    " "a_val" ");"
.BI "char    yPARSE_pushint     (int     " "a_val" ");"
.BI "char    yPARSE_pushfloat   (float   " "a_val" ");"
.BI "char    yPARSE_pushdouble  (double  " "a_val" ");"
.sp
.B link with -L/usr/local/libs -lyPARSE or -lyPARSE_debug

.SH GENERAL GUIDELINES
yPARSE can be used at four levels, each adding additional control, but also
complexity.

.B simple (see SIMPLE USAGE).
uses five functions and syntax is similar to ansi-c.  good place to start
when prototyping.

.B auto-read (see AUTO-READ USAGE).
automatic reading by direct call-back.  simplifies reading and no read loop.

.B moderate (see MODERATE USAGE).
automatic reading and automatic writing.  no read or write loop required.

.B full (see FULL-INTERFACE USAGE).
automatic reading and automatic writing.  access to all complexity.

.SH SIMPLE USAGE
this works mainly like the standard ansi-c sequence of fopen, fgets, scanf,
printf, and fclose.  the main advanage is error handling, extensive debugging,
and automatic formatting.  standard loops are still required for reading
and writing.

this method is advantageous because it requires almost no planning and works
similar to ansi-c.  but, it is always, always reactive.

.B yPARSE_simple (<in_file>, <out_file>);
   -- prepares library for simple input
   -- checks for file existance and type, opens appropriately

.B yPARSE_read_one (<*lineno>, <verb>);
   -- reads to find the next useful line, parses into fields
   -- returns line number and verb as a string

.B yPARSE_scanf (<verb>, <fmt>, ...);
   -- uses format to identify return variable types
   -- converts fields into appropiate types and returns in pointers

.B yPARSE_printf (<verb>, <fmt>, ...);
   -- uses format to determine formatting
   -- builds up a record and writes to output

.B yPARSE_close ();
   -- flushes and closes input and output files
   -- clears out the library

this can be done multiple times in the same program with no issues.

.SH AUTO-READ USAGE
similar to SIMPLE usage, only the input file is automatically read and a
call-back function is evoked for each line.  this eliminates the read loop
and allows a more centralized reading approach.  writing is the same as SIMPLE.

this method is advantageous in that code is centralized in the callback so
simple programs stay simple.  like SIMPLE, this method is also always reactive.

.B yPARSE_autoread (<in_file>, <out_file>, <callback>);
   -- adds the callback handler to yPARSE_sopen ()

.B callback (<lineno>, <verb>, <exist>, <handler>);
   -- accepts the verb and calls appropriate yPARSE_sparse

.B continue to use yPARSE_scanf, yPARSE_printf, yPARSE_close

.SH PLANNED USAGE
building on the AUTO-READ interface, this adds auto-write which eliminates
the need for a writing loop as well.  this is useful when the number of verbs
grows and so the writing function gets complex.

this method is advantageous for programs with non-trivial output files and
keeps the programmer away from the read and write details (and therefore the
need for unit testing too).

either the callback or individual readers can be used for reading.  unplanned
verbs will still report to verber.  writing is all done through the individual
writers which write all-at-once.

.B yPARSE_planned (<in_file>, <out_file>, <callback>, <name>, <desc>);
   -- adds the ability to write full files
   -- gathers some extra file header information

.B yPARSE_handler_plus (<verb>, <fmt>, <seq>, <read>, <write>, <labels>);
   -- same as simple handler, adds write sequencing and col headers

.B yPARSE_read_all ();
   -- after handlers added, this triggers the read loop

.B yPARSE_vscanf (<verb>, ...);
   -- nearly identical to yPARSE_scanf, but format saved by handler

.B yPARSE_write_all ();
   -- after handlers added, this triggers the write loop

.B yPARSE_vprintf (<verb>, ...);
   -- nearly identical to yPARSE_printf, but format saved by handler

.B yPARSE_vprintf_fancy (<cnt>, <verb>, ...);
   -- fancy, does section and column heads, breaks at 5 rows, etc

.B continue to use yPARSE_close

.SH FULL-INTERFACE USAGE
uses automatic reading and writing of full files all controlled by yPARSE.





.SH SHARED FUNCTIONS

.B yPARSE_version.  
returns a string containing the latest yPARSE version number and version
comment.  this is very useful in debugging/logging.

.B yPARSE_init.  
initializes the yPARSE environment for use and how much the reading and
writing process can be automated.

.RS 3
.B a_auto, 
sets automatic triggering of verb handlers for read and write (YPARSE_AUTO
or YPARSE_NOAUTO);

.B a_verber, 
client function to process verb type immediately (pointer to a "char (void)"
function).

.B a_reusing, 
saves lines to be adapted for future use (YPARSE_REUSE or YPARSE_NOREUSE).
.RE

.B yPARSE_handler.  
configures an individual auto verb handler.  if you set yPARSE_init a_auto
to YPARSE_AUTO, every verb must have a handler or will be rejected.  if it
was set to yPARSE_NOAUTO, these records are not necessary.

.RS 3
.B a_mode, 
identifies/links to a yVIKEYS mode, as desired.

.B a_verb, 
string name of the verb (3-10 chars).

.B a_seq, 
sequence for writing record type to output file.

.B a_specs, 
string idenfifies type for each field in record.

.B a_reader, 
function pointer to read this verb type.

.B a_writer, 
function pointer to write all of this type.

.B a_flags, 
string identifies special treatment by field.

.B a_labels, 
string of output labels for each field.

.B a_desc, 
description of verb for reference.
.RE

.SH INPUT FUNCTIONS
once yPARSE_init is called, input files can be read from any source.  the
sequence of events is very typical -- open, purge, read, handle, close.

.SS file handling

.B yPARSE_open_in,  
opens input by a full qualified path/file name.

.B yPARSE_stdin,
shorthand for yPARSE_open_in ("stdin").

.B yPARSE_read_all,
if YPARSE_auto, this function handles all input.

.B yPARSE_read,
if not YPARSE_AUTO, this reads a single record.

.B yPARSE_purge_in,
clears input queue and initializes global counts.

.B yPARSE_close_in,  
closes current input file.

.SS parsing

.B yPARSE_toss,
removes current field from queue.

.B yPARSE_popstr,
returns current field as string, advances one.

.B yPARSE_popchar,
returns current field as character, advances one.

.B yPARSE_popint,
returns current field as integer, advances one.

.B yPARSE_popfloat,
returns current field as float, advances one.

.B yPARSE_popdouble,
returns current field as double, advances one.

.SS advanced

.B yPARSE_popval  (double a_old, double *a_new);
   -- remove current field from queue
   -- translate base into a double and place in new
   -- if relative reference, add old value to new
   -- return using double pointer

.B yPARSE_popfrom (double a_old, double *a_new);
   -- same as yPARSE_popval, but treat all values as relative to old

.B yPARSE_adjval  (double a_old, char *a_entry, double *a_new);
   -- no impact on queue
   -- translate a_entry into a double and place in new
   -- if relative reference, add old value to new
   -- return using double pointer

.B yPARSE_adjfrom (double a_old, char *a_entry, double *a_new);
   -- same as yPARSE_adjval, but treat all values as relative to old




